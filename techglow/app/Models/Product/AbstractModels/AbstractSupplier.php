<?php
/**
 * Model object generated by: Skipper (http://www.skipper18.com)
 * Do not modify this file manually.
 */

namespace App\Models\Product\AbstractModels;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
* Class AbstractSupplier
* @package App\Models\Product\AbstractModels
*
* @property bigInteger $id
* @property boolean $active
* @property string $name
* @property string $slug
* @property integer $supplier_number
* @property string $api
* @property string $flow_class
* @property \Carbon\Carbon $created_at
* @property \Carbon\Carbon $updated_at
* @property \Carbon\Carbon $deleted_at
* @property \Illuminate\Database\Eloquent\Collection $sellingPrice
* @property \Illuminate\Database\Eloquent\Collection $purchasePrice
* @property \Illuminate\Database\Eloquent\Collection $supplierProducts
* @property \Illuminate\Database\Eloquent\Collection $purchaseOrders
* @property \Illuminate\Database\Eloquent\Collection $orderRows
*/ 
abstract class AbstractSupplier extends Model
{
    use SoftDeletes;
    
    /**  
     * The model's default values for attributes.
     * 
     * @var array
     */
    protected $attributes = [
        'active' => true,
        'flow_class' => '"manual"'
    ];
    
    /**  
     * The attributes that should be cast to native types.
     * 
     * @var array
     */
    protected $casts = [
        'id' => 'integer',
        'active' => 'boolean',
        'name' => 'string',
        'slug' => 'string',
        'supplier_number' => 'integer',
        'api' => 'string',
        'flow_class' => 'string',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'deleted_at' => 'datetime'
    ];
    
    /**  
     * The attributes that are mass assignable.
     * 
     * @var array
     */
    protected $fillable = [
        'active',
        'name',
        'slug',
        'supplier_number',
        'api',
        'flow_class'
    ];
    
    public function sellingPrice()
    {
        return $this->hasMany('\App\Models\Product\SellingPrice', 'supplier_id', 'id');
    }
    
    public function purchasePrice()
    {
        return $this->hasMany('\App\Models\Product\PurchasePrice', 'supplier_id', 'id');
    }
    
    public function supplierProducts()
    {
        return $this->hasMany('\App\Models\Product\SupplierProducts', 'supplier_id', 'id');
    }
    
    public function purchaseOrders()
    {
        return $this->hasMany('\App\Models\Order\PurchaseOrder', 'supplier_id', 'id');
    }
    
    public function orderRows()
    {
        return $this->hasMany('\App\Models\Order\OrderRow', 'supplier_id', 'id');
    }
}
