<?php
/**
 * Model object generated by: Skipper (http://www.skipper18.com)
 * Do not modify this file manually.
 */

namespace App\Models\Partner\AbstractModels;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
* Class AbstractPartner
* @package App\Models\Partner\AbstractModels
*
* @property bigInteger $id
* @property bigInteger $user_id
* @property boolean $active
* @property enum $partner_type
* @property enum $partner_level
* @property string $image
* @property string $first_name
* @property string $last_name
* @property string $ssn
* @property string $email
* @property string $phone
* @property string $address
* @property string $postal_code
* @property string $city
* @property string $vat_number
* @property integer $number_of_payouts
* @property string $email_validate_code
* @property \Carbon\Carbon $email_validated_at
* @property \Carbon\Carbon $phone_validated_at
* @property string $twitch_url
* @property string $youtube_url
* @property string $instagram_url
* @property string $facebook_url
* @property \Carbon\Carbon $created_at
* @property \Carbon\Carbon $updated_at
* @property \Carbon\Carbon $deleted_at
* @property \App\Models\User|null $user
* @property \Illuminate\Database\Eloquent\Collection $discountCodes
* @property \Illuminate\Database\Eloquent\Collection $ledgers
* @property \Illuminate\Database\Eloquent\Collection $orderRows
*/ 
abstract class AbstractPartner extends Model
{
    use SoftDeletes;
    
    /**  
     * The table associated with the model.
     * 
     * @var string
     */
    protected $table = 'partners';
    
    /**  
     * Customize column name for created_at timestamp
     * 
     * @var string
     */
    protected $CREATED_AT = 'created_at';
    
    /**  
     * Customize column name for updated_at timestamp
     * 
     * @var string
     */
    protected $UPDATED_AT = 'updated_at';
    
    /**  
     * The model's default values for attributes.
     * 
     * @var array
     */
    protected $attributes = [
        'user_id' => null,
        'active' => 0,
        'partner_level' => 'Bronze Partner',
        'number_of_payouts' => 0
    ];
    
    /**  
     * The attributes that should be cast to native types.
     * 
     * @var array
     */
    protected $casts = [
        'id' => 'integer',
        'user_id' => 'integer',
        'active' => 'boolean',
        'partner_type' => 'string',
        'partner_level' => 'string',
        'image' => 'array',
        'first_name' => 'string',
        'last_name' => 'string',
        'ssn' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'address' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'vat_number' => 'string',
        'number_of_payouts' => 'integer',
        'email_validate_code' => 'string',
        'email_validated_at' => 'datetime',
        'phone_validated_at' => 'datetime',
        'twitch_url' => 'string',
        'youtube_url' => 'string',
        'instagram_url' => 'string',
        'facebook_url' => 'string',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'deleted_at' => 'datetime'
    ];
    
    /**  
     * The attributes that are mass assignable.
     * 
     * @var array
     */
    protected $fillable = [
        'active',
        'partner_type',
        'partner_level',
        'image',
        'first_name',
        'last_name',
        'ssn',
        'email',
        'phone',
        'address',
        'postal_code',
        'city',
        'vat_number',
        'number_of_payouts',
        'email_validate_code',
        'twitch_url',
        'youtube_url',
        'instagram_url',
        'facebook_url'
    ];
    
    public function user()
    {
        return $this->belongsTo('\App\Models\User', 'user_id', 'id');
    }
    
    public function discountCodes()
    {
        return $this->hasMany('\App\Models\Partner\DiscountCode', 'partner_id', 'id');
    }
    
    public function ledgers()
    {
        return $this->hasMany('\App\Models\Partner\Ledger', 'partner_id', 'id');
    }
    
    public function orderRows()
    {
        return $this->hasMany('\App\Models\Order\OrderRow', 'partner_id', 'id');
    }
}
